[{"authors":["admin"],"categories":null,"content":"I am a PhD candidate in Statistics at the London School of Economics, advised by Kostas Kalogeropoulos and Pauline Barrieu, and funded by the ESRC. My main research interests revolve around Bayesian inference on state space models.\nBefore I joined LSE, I obtained a master\u0026rsquo;s degree in Quantitative Finance from ETH Zurich and University of Zurich. I have work experience in asset management through the excellent portfolio management program during my master\u0026rsquo;s studies, and from internships in the research and portfolio management division at Deutsche Bank/Deutsche Asset Management . A copy of my CV can be downloaded here.\nI am planning to highlight some of my projects and related topics that I am working on by gradually sharing blog posts here. Most of them will evolve around new concepts and theory. This gives me time to gather my thoughts and ideas, and you an introduction about topics that are typically taught in a more rigorous way.\nIf you are looking to collaborate on a research task, either in academia or in industry, do reach out. I am always happy to participate in interesting new projects!\n","date":1605312000,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1605312000,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://paschermayr.github.io/author/patrick-aschermayr/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/patrick-aschermayr/","section":"authors","summary":"I am a PhD candidate in Statistics at the London School of Economics, advised by Kostas Kalogeropoulos and Pauline Barrieu, and funded by the ESRC. My main research interests revolve around Bayesian inference on state space models.","tags":null,"title":"Patrick Aschermayr","type":"authors"},{"authors":null,"categories":null,"content":"Course information can be found here.\n","date":1567987200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1591660800,"objectID":"6d2f9f6bde8d7eced9372e8fbdf3789c","permalink":"https://paschermayr.github.io/teaching/lse-2020-st308-bayesian-inference/","publishdate":"2019-09-09T00:00:00Z","relpermalink":"/teaching/lse-2020-st308-bayesian-inference/","section":"teaching","summary":"Graduate teaching assistant in my second year of PhD studies at the LSE.","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"Course information can be found here.\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1591660800,"objectID":"fd5670009ed34be37c90dd6e0c163a42","permalink":"https://paschermayr.github.io/teaching/lse-2019-st107-quantitative-methods/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/teaching/lse-2019-st107-quantitative-methods/","section":"teaching","summary":"Graduate teaching assistant in my first year of PhD studies at the LSE.","tags":null,"title":"Overview","type":"docs"},{"authors":["Patrick Aschermayr"],"categories":["State Space Models"],"content":"Particle MCMC for State Space Model Estimation\nBuilding our first PMCMC algorithm! This will be the final post of the series where everything will (hopefully) come together. In the first posts about HMMs and HSMMs, I explained the basics about said models. In the first blog post of my Inference in state space models series, I outlined a rough sketch on how to conduct parameter estimation for these models, and concluded that Bayesian methods are particularly suitable if we want to jointly sample the model parameter and the state sequence given the observed data. In the following post, I coded up a basic particle filter from scratch to sample the state sequence and, in my latest post, I implemented a framework to sample the corresponding model parameter. Please note that going forward you will need to import all Julia functions that we defined so far in order to make the code in this article work. If you do not want to copy paste code through all the articles, you can download the Julia scripts from my GitHub profile.\nExplaining the estimation problem Let us straight jump into the topic: the goal is to infer the posterior $P( s_{1:T}, \\theta \\mid e_{1:T})$. $\\theta$ is, in our case, all the observation and transition parameter. If we assume univariate Normal observation distributions, we need to estimate $\\mu$ and $\\sigma$ for each state. In addition, we need to estimate the transition matrix, which I will keep fixed for now. You can also estimate this matrix if you extend our code in the MCMC part of the series for vector valued distributions. As a quick recap, we will use the particle filter from this post to sample the state trajectory, and the Metropolis sampler from this post to propose new model parameter. With the information gathered from both steps, we will either accept or reject this pair.\nCoding the PMCMC framework Let us start by loading all necessary libraries and defining two helper functions that we need in the PMCMC framework: a function to transfer the current values in our parameter container into the corresponding model distributions as well as a function to show all current values in this parameter container.\n#Support function to transfer parameter into distributions function get_distribution(μᵥ::Vector{ParamInfo}, σᵥ::Vector{ParamInfo}) return [Normal(μᵥ[iter].value, σᵥ[iter].value) for iter in eachindex(μᵥ)] end get_distribution(param::HMMParameter) = get_distribution(param.μ, param.σ) #Support function to grab all parameter in HMMParameter container function get_parameter(parameter::HMMParameter) θ = Float64[] for field_name in fieldnames( typeof( parameter ) ) sub_field = getfield(parameter, field_name ) append!(θ, [sub_field[iter].value for iter in eachindex(sub_field) ] ) end return θ end  get_parameter (generic function with 1 method)  Neither of the two functions are needed to grasp the concept of PMCMC, but are useful for the sampling process. Next, let us sample the corresponding observed and latent data for some HMM. We will use these model parameter later on to compare the accuracy of our PMCMC algorithm:\n#Generate data T = 100 evidence_true = [Normal(2., 1.), Normal(-2.,1.)] transition_true = [ Categorical([0.85, 0.15]), Categorical([0.5, 0.5]) ] s, e = sampleHMM(evidence_true, transition_true, T) #Plot data plot( layout=(2,1), label=false, margin=-2Plots.px) plot!(e, ylabel=\u0026quot;observed data\u0026quot;, label=false, subplot=1, color=\u0026quot;gold4\u0026quot;) plot!(s, yticks = (1:2), ylabel=\u0026quot;latent state\u0026quot;, label=false, subplot=2, color=\u0026quot;black\u0026quot;)  \r\rI explained this code already in an earlier post, so check this one out if there are any unclarities. I will now initialize the model parameter and the corresponding particle filter - note that there are many methods to do so, but for now we just initialize them manually, far enough away from the true parameter:\n#Generate Initial parameter estimates - for univariate normal observations μᵥ = [ParamInfo(3.0, Normal() ), ParamInfo(-3.0, Normal() )] #Initial value and Prior σᵥ = [ParamInfo(1.5, Gamma(2,2) ), ParamInfo(2.0, Gamma(2,2) )] #Initial value and Prior param_initial = HMMParameter(μᵥ, σᵥ) #Generate initial state trajectory evidence_current = get_distribution(param_initial) transition_current = deepcopy(transition_true) initial_current = Categorical( gth_solve( Matrix(get_transition_param(transition_current) ) ) ) pf = ParticleFilter(initial_current, transition_current, evidence_current)  You can check out this post if the code above is still unclear to you. Now all that is left to do is implementing the PMCMC sampling routine. I did my best to comment and make the code as clear as possible by adding comments at almost each line - the steps itself do not differ much from a standard Metropolis algorithm, so this function should be relatively straightforward to understand. The Unicode support for Julia also helps a lot here, as I could use a subscript t for variables that are defined in the transformed parameter space. Some more comments to understand the code a bit more clearly:\n  The function input are the particle filter and the initial parameter guess we stated above. Additionally, the observed data will be used for the likelihood evaluation. Iterations stands for the number of samples that will be obtained. Scaling is a tuning parameter that states how big the proposal steps for the parameter will be. The larger the tuning parameter, the larger the movements. This influences the speed of convergence and acceptance rate into opposite directions. Check it out yourself by plugging in different values.\n  The function output are the parameter and state trajectory samples. The results are pre-allocated at the beginning of the function in matrices called traces and will ultimately be used to check the accuracy of our algorithm.\n  Before the loop starts, the initial parameter and state trajectory are assigned, and the log prior and likelihood given these values are calculated.\n  The algorithm then proceeds by iteratively sampling new parameter and a state trajectory given the new parameter. Each iteration will be stored in the corresponding trace: if the step is accepted, the proposed parameter-trajectory pair is stored. Otherwise the current pair is stored.\n  That\u0026rsquo;s it! Let us have a look:\n  function sampling(pf::ParticleFilter, parameter::HMMParameter, observations::AbstractArray{T}; iterations = 5000, scaling = 1/4) where {T} ######################################## INITIALIZATION #initial trajectory and parameter container trace_trajectory = zeros(Int64, size(observations, 1), iterations) trace_θ = zeros(Float64, size( get_parameter(parameter), 1), iterations) #Initial initial prior, likelihood, parameter and trajectory logπₜ_current = calculate_logπₜ(parameter) θ_current = get_parameter(parameter) loglik_current, _, s_current = propose(pf, observations) #Initialize MCMC sampler θₜ_current = transform(parameter) mcmc = Metropolis(θₜ_current, scaling) ######################################## PROPAGATE THROUGH ITERATIONS for iter in Base.OneTo(iterations) #propose a trajectory given current parameter θₜ_proposed = propose(mcmc) #propose new parameter given current parameter - start by changing modelparameter in pf with current θₜ_proposed inverse_transform!(parameter, θₜ_proposed) pf.observations = get_distribution(parameter) logπₜ_proposed = calculate_logπₜ(parameter) loglik_proposed, _, s_proposed = propose(pf, observations) #Accept or reject proposed trajectory and parameter accept_ratio = min(1.0, exp( (loglik_proposed + logπₜ_proposed) - (loglik_current + logπₜ_current) ) ) accept_maybe = accept_ratio \u0026gt; rand() if accept_maybe θ_current = get_parameter(parameter) s_current = s_proposed logπₜ_current = logπₜ_proposed loglik_current = loglik_proposed #Set current θ_current as starting point for Metropolis algorithm mcmc.θₜ = θₜ_proposed #transform(parameter) end #Store trajectory and parameter in trace trace_trajectory[:, iter] = s_current trace_θ[:, iter] = θ_current end ######################################## return trace_trajectory, trace_θ end  sampling (generic function with 1 method)  Let us run this function with our initial parameter estimates:\ntrace_s, trace_θ = sampling(pf, param_initial, e; iterations = 3000, scaling = 1/4)  The final step is to check our posterior samples. I will do so by comparing the traces of the trajectories and the parameter against the parameter that have been used to generate the data:\n#Check how well we did - trajectories plot_latent = Plots.plot(layout=(1,1), legend=:topright) Plots.plot!(s, ylabel=\u0026quot;latent state\u0026quot;, label=false, color=\u0026quot;black\u0026quot;) Plots.plot!( round.( mean(trace_s; dims=2) ), color=\u0026quot;gold4\u0026quot;, label=\u0026quot;Posterior nearest state\u0026quot;) plot_latent  \r\r#Check how well we did - θ plot_θ = Plots.plot(layout=(2,1), legend=:topright) Plots.hline!([2.,-2.], ylabel=\u0026quot;μ\u0026quot;, xlabel=\u0026quot;\u0026quot;, subplot=1, color=\u0026quot;black\u0026quot;, legend=false) Plots.plot!( trace_θ[1:2,:]', color=\u0026quot;gold4\u0026quot;, label=\u0026quot;Posterior draws\u0026quot;, subplot=1, legend=false) Plots.hline!([1.], ylabel=\u0026quot;σ\u0026quot;, xlabel=\u0026quot;PMCMC Iterations\u0026quot;, subplot=2, color=\u0026quot;black\u0026quot;, legend=false) Plots.plot!( trace_θ[3:4,:]', color=\u0026quot;gold4\u0026quot;, label=\u0026quot;Posterior draws\u0026quot;, subplot=2, legend=false) plot_θ  \r\rNot bad! Test it out yourself with different starting values, and check what happens if you change some of the tuning parameter, like the scaling size for the MCMC sampler, or the number of particles in the particle filter. In any case, you should now have a rough understanding about the PMCMC machinery, well done!\nAll done! This concludes the mini series about inference on state space models. I hope this primer was enough to create some interest, shoot me a message if you have any comments! There are a lot of topics left to make further posts: we have not touched parameter initialization, expanding the algorithm to other state space models, or making the algorithm more efficient. So far, we have not even discussed forecasting! Though I have not decided on future blog posts yet, I will certainly expand on some of these topics. See you soon!\n","date":1605312000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1605312000,"objectID":"9ae82dfbd107337fe26feca719e8c651","permalink":"https://paschermayr.github.io/post/statespacemodels-3-inference-on-state-space-models-part-4/","publishdate":"2020-11-14T00:00:00Z","relpermalink":"/post/statespacemodels-3-inference-on-state-space-models-part-4/","section":"post","summary":"Particle MCMC for State Space Model Estimation","tags":["State Space Models","Particle MCMC","Hidden Markov Model","Julia"],"title":"Bayesian Inference on State Space Models - Part 4","type":"post"},{"authors":["Patrick Aschermayr"],"categories":["State Space Models"],"content":"The MCMC in PMCMC - Making a Proposal Distribution for State Space Model Parameter\nAlmost done! In my previous blog posts here and here, we explored a general framework on how to conduct parameter estimation for state space models (SSM), and took a first step in implementing this machinery. In order to apply Particle MCMC (PMCMC), we have to\n   Find a good proposal distribution $f(\\theta^{\\star} \\mid \\theta)$ for $ \\theta^{\\star}$.    Find a good proposal distribution $P(s^\\star_{1:T} \\mid \\theta^{\\star}, e_{1:T})$ for $ S^{\\star}_{1:T}$.    Find a sufficiently \u0026lsquo;good\u0026rsquo; likelihood approximation $\\hat{\\mathcal{L}}$$_{\\theta}(e_{1:T})$ that we can plug into the acceptance rate.    We have already tackled the latter two problems in the previous posts, so what about the first one?\nThe MCMC in PMCMC If we want to jointly sample the parameter vector $\\theta$, the first thing we need to do is to check the corresponding boundary conditions of our parameter. For instance, if we want to estimate parameter of univariate normal observations, the mean parameter is typically defined on the whole Reals, while the variance is constrained to be positive. There are several ways to proceed:\n  i. We could, in principle, use some multivariate proposal distribution $f( . \\mid \\theta)$, and reject all proposals where one of the parameter falls outside of the corresponding boundaries. This is, as you already guessed, very wasteful.\n  ii. Alternatively, you could use a truncated multivariate proposal distribution. Note that this is NOT the same as (i.), as one needs to adjust the normalisation constants in the MH acceptance ratio, see this blog post for a more detailed explanation. This approach is intuitively more efficient than the first option, but highly model specific and sometimes difficult to track for errors.\n  iii. Another possibility is to first transform the corresponding parameter into an unconstrained space, perform the MCMC step in this unconstrained space, and then transform the proposed parameter back into the original space for the likelihood evaluation. In this case, we have to be careful when calculating the prior. As we are now working with the transformed parameter, we need to adjust the prior distribution with the Jacobian of the transform (keyword: push-forward measure). If you have trouble understanding that, I recommend this explanation before you proceed reading. This approach has a much higher initial workload, but to my mind is the most general and effective way to perform MCMC, and almost all libraries that you use work in this way under the hood. Consequently, we will focus on the third case.\n  So, how can we code this up? The most straightforward way to implement this approach is by using information from the corresponding prior: boundaries, length and dimension of each parameter can be inferred from here. I will use a new Julia package Bijectors.jl that makes the workflow significantly easier, but there are similar packages in other languages as well.\nCoding it all up In my last post, we implemented a particle filter for basic hidden Markov models, so let us continue to use this example. Hence, we are interested in the mean and variance parameter for each state, and the corresponding transition matrix of the latent Markov chain. For now, let us assume the transition matrix is known, so we can implement the MCMC machinery for scalar based parameter, and do not need to extend our functions for vector valued parameter. To my mind, this would put too much attention to the code rather than the actual topic. We start by creating a container that can hold one parameter and its corresponding priors.\nusing Distributions, Bijectors, Parameters import Base: count #A container with necessary information about θ mutable struct ParamInfo{T, D\u0026lt;:Union{Nothing, \u0026lt;:Distributions.Distribution} } value :: T #Can be Real, Integer, or a Arrays composed of it prior :: D #Corresponding prior of value, needs to fulfill boundary constraints! end ParamInfo(value::T) where {T} = ParamInfo(value, nothing) #Check the number of parameter in ParamInfo struct function count(paraminfo::ParamInfo) return length(paraminfo.value) end  count (generic function with 17 methods)  Note that I also defined a function that informs us about the parameter size inside this container. Next, we will make a summary container for all the different parameter that we will need during the tutorial - i.e., mean and variance parameter of a univariate Normal distribution for each state in the basic HMM case.\n#A summary container for all relevant parameter mutable struct HMMParameter μ :: Vector{ParamInfo} #Observation Distribution Mean σ :: Vector{ParamInfo} #Observation Distribution Variance end  Further, we want to define some helper functions that enable us to transform and inverse transform the parameter in said container. Remember that our goal is to sample from some unconstrained space, and then inverse transform said parameter back to our constrained space. This will help us to accept more parameter proposals in the MCMC step. Note that I will use a subscript t for certain variables in order to indicate that the operation takes place in the transformed space.\n#Wrapper to transform θ into an unconstrained space function transform(parameter::ParamInfo) return Bijectors.link(parameter.prior, parameter.value) end #Wrapper to transform θₜ back into the original space, and store it in parameter struct function inverse_transform!(parameter::ParamInfo, θₜ::T) where {T} value = Bijectors.invlink(parameter.prior, θₜ) @pack! parameter = value return value end #The same two functions dispatched on the summary container function transform(parameter::HMMParameter) θₜ = Float64[] for field_name in fieldnames( typeof( parameter ) ) sub_field = getfield(parameter, field_name ) append!(θₜ, transform.(sub_field) ) end return θₜ end function inverse_transform!(parameter::HMMParameter, θₜ::Vector{T}) where {T} counter = 1 for field_name in fieldnames( typeof( parameter ) ) sub_field = getfield(parameter, field_name ) dim = sum( count.(sub_field) ) inverse_transform!.( sub_field, θₜ[ counter:(-1 + counter + dim )] ) counter += dim end end  inverse_transform! (generic function with 2 methods)  We must define this for both the individual ParamInfo as well as the summary container. This is, admittedly, not a straightforward process. However, the important part is that we now have a container that holds all the unknown observation parameter that we need in the HMM case, and we can freely transform and inverse transform parameter that are contained in there. If you understand this goal, then you are perfectly fine to continue.\nAs an example, let us now create an object that contains the mean and variance parameter of a univariate Normal two-state HMM. Next, we transform all parameter into an unconstrained space, sample the transformed parameter and inverse transform them back into the original space:\n#Create a Vector of univariate Normal Model parameter and assign a prior to each of them: μᵥ = [ParamInfo(-2.0, Normal() ), ParamInfo(2.0, Normal() )] #Initial value and Prior σᵥ = [ParamInfo(1.0, Gamma() ), ParamInfo(1.0, Gamma(2,2) )] #Initial value and Prior hmmparam = HMMParameter(μᵥ, σᵥ) #Transform parameter: transform(hmmparam) #Sample parameter from an unconstrained distribution, then inverse transform and plug into our container: θₜ_proposed = randn(4) inverse_transform!(hmmparam, θₜ_proposed) hmmparam #Check that parameter in hmmparam fulfill boundary conditions  Well done, we achieved our initial goal! You can run the above code several times, and will see that the plugged in parameter in the constrained space will satisfy the corresponding boundary conditions, even though we sampled from a multivariate Normal distribution. At the very beginning, I mentioned that when transforming parameter in an unconstrained space, one has to adjust the corresponding prior. These adjustments will all be handeled by the Bijectors package, so we can conveniently write a function that calculates the prior for each of our parameter and returns the sum of it. This will be helpful when we run the PMCMC algorithm in the next blog post.\n#function to calculate prior including Jacobian adjustment function calculate_logπₜ(parameter::ParamInfo) return logpdf_with_trans(parameter.prior, parameter.value, true) end #Wrapper to calculate prior including jacobian adjustment on all parameter function calculate_logπₜ(parameter::HMMParameter) πₜ = 0.0 for field_name in fieldnames( typeof( parameter ) ) sub_field = getfield(parameter, field_name ) πₜ += sum( calculate_logπₜ.(sub_field) ) end return πₜ end  calculate_logπₜ (generic function with 2 methods)  Perfect! Now we are almost done for today, the last thing to do is to create a MCMC sampler. We will use a straightforward Metropolis algorithm with a multivariate Normal proposal distribution. As before, we will first define a container with all the necessary information and a function on it to sample via this object:\n# Container with necessary information for a Metropolis MCMC step mutable struct Metropolis{T\u0026lt;:Real} θₜ :: Vector{T} scaling :: Float64 end # Function to propose a Metropolis step function propose(sampler::Metropolis) @unpack θₜ, scaling = sampler return rand( MvNormal(θₜ, scaling) ) end  propose (generic function with 1 method)  Scaling is a tuning parameter that determines how large the proposal steps for the parameter will be. The larger the tuning parameter, the larger the proposed movements will be, which might result in a lower acceptance rate. Check this out yourself. At the end, we check our framework by assigning an initial parameter value and sampling from there via this MCMC sampler:\n#Create an initial sampler, and propose new model parameter: θₜ_inital = randn(4) metropolissampler = Metropolis(θₜ_inital, 1/length(θₜ_inital) ) propose(metropolissampler)  4-element Array{Float64,1}: -0.5791553185118626 0.5875000886407763 -0.09563827588507412 1.1869926689230335  Way to go! This section was more straightforward than the previous one! We can now store, transform and inverse transform model parameter of a basic HMM. We can also create a basic MCMC algorithm to sample said parameter. In my final post, we will combine the previous instalments of this series and implement the PMCMC algorithm to estimate HMM model and state trajectory parameter jointly. See you soon!\n","date":1604016000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1604016000,"objectID":"5bba9f1275c458247441f6e255d3504a","permalink":"https://paschermayr.github.io/post/statespacemodels-3-inference-on-state-space-models-part-3/","publishdate":"2020-10-30T00:00:00Z","relpermalink":"/post/statespacemodels-3-inference-on-state-space-models-part-3/","section":"post","summary":"MCMC for State Space Model Estimation","tags":["State Space Models","Particle MCMC","Hidden Markov Model","MCMC","Julia"],"title":"Bayesian Inference on State Space Models - Part 3","type":"post"},{"authors":["Patrick Aschermayr"],"categories":["State Space Models"],"content":"Particle Filtering in State Space Models\nWelcome back! In my previous blog post, we explored a general framework to conduct parameter estimation on state space models (SSM). We call this framework Particle MCMC (PMCMC), and the three major steps to successfully apply this algorithm are as follows:\n   Find a good proposal distribution $f(\\theta^{\\star} \\mid \\theta)$ for $ \\theta^{\\star}$.    Find a good proposal distribution $P(s^\\star_{1:T} \\mid \\theta^{\\star}, e_{1:T})$ for $ S^{\\star}_{1:T}$.    Find a sufficiently \u0026lsquo;good\u0026rsquo; likelihood approximation $\\hat{\\mathcal{L}}$$_{\\theta}(e_{1:T})$ that we can plug into the acceptance rate.    In this post, we will try to solve problems 2. and 3. simultaneously. Hence, we need to find a way to sample a state trajectory and get an approximation for the likelihood given the current parameter vector $\\theta$. In order to use all the code we use here, please load all the functions from my introductory HMM article, or just include the corresponding HMM Julia file from my GitHub account.\nFiltering the latent state trajectory In PMCMC, a particle filter (PF) is used to first sample a trajectory $s^{\\star}_{1:T}$ and then calculate an unbiased estimate of the corresponding likelihood. Note that unbiased does not mean our estimate is automatically \u0026lsquo;good\u0026rsquo; enough, so there is quite a bit of ongoing research on how to keep the variance of particle filter likelihood estimates in check. For an in-depth explanation about PFs, I refer to (Doucet and Johansen, 2011), as explaining the whole machinery of it in detail is simply out of reach in a simple blog post.\nIn a nutshell, particle filters are usually used to solve filtering equations in the form of $$ \\begin{equation} \\begin{split} \\pi_t( x_{1:t} ) \u0026amp;= \\frac{ \\tau_t(x_{1:t}) }{ Z_t }. \\\\\n\u0026amp;= \\frac{ w_{1:t} q_t(x_{1:t}) }{ Z_t }\\\n\\end{split} \\end{equation} $$\nHere, the goal is to sequentially sample a sequence of random variables, $X_t, t \\in (1,\u0026hellip;, T)$ that come from a sequence of target probabilities $\\pi_t( x_{1:t} )$ with the same computational complexity at each time step. The last part is crucial as we do not want to increase the computing time as more and more data comes in. You will notice I rewrote the equation by introducing $w_{1:t}=\\frac{ \\tau_t(x_{1:t}) }{ q_t(x_{1:t}) }$. Those familiar with importance sampling will likely understand why, but the reason we did so is because usually it is very difficult to sample from $\\tau_t(x_{1:t})$. We introduce an easier distribution $q_t(x_{1:t})$ and reweight this distribution via $w_{1:t}$. Consequently, we need to find a good proposal distribution $q_t(x_{1:t})$, such that the computational complexity will not increase over time. A convenient by-product is that we can approximate the normalizing constant $Z_t$ with these weights: $$ \\begin{equation} \\hat{Z_t} = \\frac{1}{t} \\sum_{i=1}^{K} \\frac{\\tau_t(x_{1:t})}{q_t(x_{1:t})} = \\frac{1}{t} \\sum_{i=1}^{K} w_t(x^i_{1:t}). \\end{equation} $$\nIn the basic HMM case, the joint distribution and the normalizing constant are of the form $\\tau_t(x_{1:t}) = \\prod_{k=1}^{t} f(s_k \\mid s_{k-1}) g(e_k \\mid s_k)$ and $Z = p(e_{1:t})$. Hence you can use the weights from above to approximate the likelihood that we need in the PMCMC sampler. In order to have a constant time complexity, one can use the Markovian properties of the latent states by imposing some transition density $q_{t}( x_{t} \\mid x_{t-k})$ and propagating particles forward at each time step t. Afterwards, these particles will be weighted with the weight function we introduced above. Particles that are very unlikely given the observed data will then be replaced by more realistic particles - this has the effect that variance of our likelihood estimate will not be \u0026lsquo;too\u0026rsquo; large. After we propagated a bunch of particles forward up to the final time point T, we can sample one trajectory of these particles to get $P(s^{\\star}_{1:T} \\mid \\theta^{\\star}, e_{1:T})$ for our PMCMC algorithm.\nIf you read through the paper mentioned above, you will discover the optimal importance/proposal distribution in terms of minimising the variance of the likelihood estimate for processes with Markov property is $q(s_t \\mid s_{t-1}, e_t) = p(s_t \\mid s_{t-1}, e_t)$. This is usually not availabe, but gives some insight about good candidates. A common and simple choice is the so-called Bootstrap filter, which takes $q(s_t \\mid s_{t-1}, e_t) = p(s_t \\mid s_{t-1})$ and simplifies the corresponding particle weights to to $p(e_t \\mid s_t)$. Both of these distributions are readily available in the HMM and HSMM case, so we jump straight into the coding section.\nCoding our very first particle filter The first thing that we need to define is the particle filter container itself. We will use the same style and structure as in our HMM post, and the advantage of the Bootstrap filter is that we can just plug in the model distributions from the HMM to define our PF. As a result, we define a field for the initial and transition distribution for our particles. The last field, observations, is used to weight the particles that we sample, so we can filter our particles that do not seem to capture the data well enough:\nusing Distributions, Parameters, Plots import QuantEcon: gth_solve mutable struct ParticleFilter initial :: Distributions.Distribution transition :: Vector{\u0026lt;:Distributions.Distribution} observations :: Vector{\u0026lt;:Distributions.Distribution} end  In addition, we will define a helper function to calculate the corresponding weights in the log domain. This usually helps the numerical stability of the algorithm.\n#Helper function function logsumexp(arr::AbstractArray{T}) where {T \u0026lt;: Real} max_arr = maximum(arr) max_arr + log(sum(exp.(arr .- max_arr))) end function logmeanexp(arr::AbstractVector{T}) where {T \u0026lt;: Real} log( 1/size(arr, 1) ) + logsumexp( arr ) end  logsumexp (generic function with 1 method)  Good! Now we can straight jump into the actual code. As always, I do my best to make as many comments as possible, but to fully understand each step, there is probably no escape from reading the actual particle filter literature I mentioned above. Some comments to understand the code a bit more clearly:\n  The function input are the particle filter we defined above, and some observed data that we use to weight the particles that we propagate forward.\n  The function output is a log likelihood estimate, all the particle trajectories that we propagated forward, and a single trajectory that we will later on use in the PMCMC algorithm.\n  Before we start the for loop, we pre-allocate the weights and the particles that we calculate later on. As you can see, we also normalize the weights, which I will denote with a subscript norm.\n  The first particles are chosen from the initial distribution. If the latent states of the data are conceived as a subsequence of a long-running process, the probability of the initial state should be set to the stationary state probabilities of this unobserved Markov chain. Hence, this will be a function of the transition distribution of our model.\n  The for-loop evolves around iteratively propagating particles forward and calculating the corresponding weights of the particles. As you can see, we will not always reweighting the particles at each iteration, but only if a certain threshold is achieved. This usually results in a even lower variance for our likelihood estimate. You can test this out yourself by altering the code and reweight at each iteration.\n  That\u0026rsquo;s it! Let us have a look:\n  #Create a function to run a particle filter function propose(pf::ParticleFilter, evidence::AbstractArray{T}; Nparticles=100, threshold=75) where {T\u0026lt;:Real} #Initialize variables @unpack initial, transition, observations = pf #Model parameter ℓlik = 0.0 #Log likelihood ℓweights = zeros(Float64, Nparticles)#Weights that are used to approximate log likelihood ℓweightsₙₒᵣₘ = similar(ℓweights) #initialize particles and sample first time point via initial distribution particles = zeros(Int64, size(evidence, 1), Nparticles ) particles[1,:] = rand(initial, Nparticles) #loop through time for t in 2:size(evidence, 1) #propagate particles forward particles[t, :] .= rand.( transition[ particles[t-1, :] ] ) #Get new weights and calculate log likelihood ℓweights .= logpdf.( observations[ particles[t, :] ], evidence[t] ) ℓweightsₙₒᵣₘ .= ℓweights .- logsumexp(ℓweights) ℓlik += logmeanexp(ℓweights) #add incremental likelihood #reweight particles if resampling threshold achieved if exp( -logsumexp(2. * ℓweightsₙₒᵣₘ) ) \u0026lt;= threshold paths = rand( Categorical( exp.(ℓweightsₙₒᵣₘ) ), Nparticles ) particles .= particles[:, paths] #Whole trajectory! end end #Draw 1 trajectory path at the end path = rand( Categorical( exp.(ℓweightsₙₒᵣₘ) ) ) trajectory = particles[:, path] #to keep type return ℓlik, particles, trajectory end  propose (generic function with 1 method)  Perfect! With the weights, we can obtain the likelihood approximation, and with the particles, we can get the state trajectory that we need for the PMCMC algorithm. We still need to compute a function that translates our transition matrix to the initial distribution of the corresponding Markov chain. As such, we create a helper function so we can extract all the transition matrix parameter from our particle filter:\n#Create a function so that we can obtain initial distribution from transition matrix function get_transition_param(transitionᵥ::Vector{\u0026lt;:Categorical}) return reduce(hcat, [transitionᵥ[iter].p for iter in eachindex(transitionᵥ)] )' end  get_transition_param (generic function with 1 method)  Do not worry, this function is not necessary to understand the mechanics of PMCMC. It is just a convenient wrapper to create a transition matrix from all the parameter in our transition distribution. Now, let us check how good our algorithm works by first sampling some HMM data:\nT = 150 HMMevidence = [Normal(2., .5), Normal(-2.,2.)] HMMtransition = [ Categorical([0.95, 0.05]), Categorical([0.5, 0.5]) ] state, observation = sampleHMM(HMMevidence, HMMtransition, T) plot( layout=(2,1), label=false, margin=-2Plots.px) plot!(observation, ylabel=\u0026quot;data\u0026quot;, label=false, subplot=1, color=\u0026quot;gold4\u0026quot;) plot!(state, yticks = (1:2), ylabel=\u0026quot;state\u0026quot;, label=false, subplot=2, color=\u0026quot;black\u0026quot;)  \r\rNext, let us create a Bootstrap particle filter with the corresponding transition and observation distribution from the HMM. If our code is correct, then the particle trajectories of our PF should be very close to the latent state sequence from the sample HMM data. As already mentioned, the initial distribution will be a function of the transition matrix:\n#Initialize PF pf = ParticleFilter( Categorical( gth_solve( Matrix(get_transition_param(HMMtransition) ) ) ), HMMtransition, HMMevidence )  Cool! Now let us run the particle filter once and plot the propagated trajectories against the sample data:\nll, particles, trajectory = propose(pf, observation; Nparticles=500, threshold=500 ) Plots.plot(state, label=\u0026quot;HMM latent states\u0026quot;, xlabel=\u0026quot;time\u0026quot;, ylabel=\u0026quot;latent state\u0026quot;) Plots.plot!( mean(particles; dims=2) , label=\u0026quot;Particle Filter state trajectories\u0026quot;)  \r\rGood! The propagated particle trajectories from our algorithm are close to the sample data, exactly what we wanted to have. Play around with this yourself for different HMM parameter. There are, however, still a few aspects we have not yet dived into. For instance, how many particles do we need to achieve a \u0026ldquo;good\u0026rdquo; likelihood approximation? In the basic HMM case, we could actually calculate the likelihood exactly, and then check the solution against our approximation. This has been implemented many times, so it is easy to code this up yourself. I will instead focus on a different aspect: we said that our approximation is unbiased, but what about the variance of this estimate? There is a pretty good discussion and ideas on how to tune the number of particles on Professor Darren Wilkinson\u0026rsquo;s blog post about Particle MCMC. We already know that we can decrease the variance of our estimate by inflating the number of particles, but this comes at the cost of additional computing time - so how much is enough? Moreover, given we apply the particle filter in combination with a MCMC algorithm, it is important to know on whether the variance of our estimate is constant across the support of our parameter. To check this, we will initiate a grid of possible values for one parameter of your choice, and then run the particle filter several times for each element in the grid. In the end, we can visually check if the variance for these estimates is (a) low enough for your problem and (b) stays constant for a range of possible values:\n#Check variance of likelihood estimate over a range of θ function check_ll(pf::ParticleFilter, evidence::AbstractArray{T}, grid; runs = 20, Nparticles = 100) where {T\u0026lt;:Real} #Assign a matrix to store log likelihood estimate for each run ll_estimate = zeros(Float64, runs, length(grid)) #Loop through the grid \u0026quot;runs\u0026quot; number of times, and assign the likelihood estimate to the preallocated matrix for iter in eachindex(grid) pf.observations[1] = Normal( grid[iter], pf.observations[1].σ) Base.Threads.@threads for idx in Base.OneTo(runs) ll_estimate[idx, iter], _, _ = propose(pf, observation; Nparticles = Nparticles, threshold = Nparticles ) end end #Return the log likelihood estimates return ll_estimate end grid = 1.0:0.05:3.0 ll_estimate = check_ll(pf, observation, grid; Nparticles = 500) plot(grid, ll_estimate', seriestype = :scatter, ms=3.0, label=\u0026quot;\u0026quot;, xlabel=\u0026quot;Parameter value\u0026quot;, ylabel=\u0026quot;log likelihood estimate\u0026quot;)  \r\rIn this case, the variance does not seem to increase drastically given enough particles. You can see the contrast when assigning only a fraction of them:\nll_estimate = check_ll(pf, observation, grid; Nparticles = 50) plot(grid, ll_estimate', seriestype = :scatter, ms=3.0, label=\u0026quot;\u0026quot;, xlabel=\u0026quot;Parameter value\u0026quot;, ylabel=\u0026quot;log likelihood estimate\u0026quot;)  \r\rIn practice, you can choose the number of particles that you want to use by running a few trials for different parameter grids, but there are also methods to do so on the fly, some of them mentioned in my linked blog post above.\nNice one! Wow, it took me a very long time to write this article, because it was extremely difficult to find a satisfying trade-off between making this post intuitive and explaining enough theory to ensure the code above makes any sense to you. To be honest, I would recommend reading one or two tutorials on particle filtering to fully understand the code, but I hope you could grasp the general goal through this blog post. That being said, the most difficult part is done! We can now sample a state trajectory and obtain a likelihood estimate for our MCMC algorithm for state space models. In part 3, we will use the most basic MCMC sampler and then finish the PMCMC algorithm to obtain estimates for a basic HMM. See you soon!\nReferences Doucet, A. and Johansen, A. (2011). A tutorial on particle filtering and smoothing: Fifteen years later.\n","date":1602806400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602806400,"objectID":"40eda38632362de4172f0193540e55fa","permalink":"https://paschermayr.github.io/post/statespacemodels-3-inference-on-state-space-models-part-2/","publishdate":"2020-10-16T00:00:00Z","relpermalink":"/post/statespacemodels-3-inference-on-state-space-models-part-2/","section":"post","summary":"Particle Filtering in State Space Models","tags":["State Space Models","Particle MCMC","Hidden Markov Model","Particle Filter","Julia"],"title":"Bayesian Inference on State Space Models - Part 2","type":"post"},{"authors":["Patrick Aschermayr"],"categories":["State Space Models"],"content":"Inference on State Space Models - an Overview\nHi there! In my previous posts, I introduced two discrete state space model (SSM) variants: the hidden Markov model and hidden semi-Markov model. However, in all code examples, model parameter were already given - what happens if we need to estimate them? This post is the first of a series of four blog entries, in which I will explain a general framework to perform parameter inference on SSMs and implement a basic example for demonstration. Ideally, I would make all three posts as applied as my previous articles, but I have to use some theory in the beginning to make things easier going forward.\nWhile SSMs are very flexible and can describe data with a complex structure, parameter estimation can be very challenging. Analytical forms of the corresponding likelihood functions are only available in special cases and, thus, standard parameter optimization routines might be unfeasible. Consequently, the major challenge in solving SSMs is the generally intractable likelihood function $p_{\\theta}(e_{1:t}) = \\int p_{\\theta}(e_{1:t}, s_{1:t}) d s_{1:t}$, which integrates over the (unknown) latent state trajectory. As previously mentioned, $E_t$ is the observed data and $S_t$ the corresponding latent state.\nSo what can we do? If both $E_t$ and $S_t$ follow a Normal distribution, one may analytically estimate the corresponding model parameter via the so called Kalman equations, but given these very specific assumptions, we will not concentrate on this special case going forward. If $S_{1:T}$ is discrete, then the most common point estimation technique is the EM-Algorithm. In this case, one can use common filtering techniques, explained in (Rabiner, 1989), to iteratively calculate state probabilities and update model parameter. Once the EM-Algorithm has reached some convergence criterion, one may estimate the most likely state trajectory given the estimated parameter. I will not go into much detail here because this procedure has been explained on many occasions and will instead refer to the literature above. However, both approaches do not work in many cases. The former technique only works with very specific model assumptions. The latter technique is not available in case $S_{1:T}$ is continuous. Moreover, even if the state sequence is discrete, summing out the state space might be computationally very challenging if the latent state structure is complex. In addition, one may not be able to write down the analytical forms of the updating equations for more complex state space models.\nAnother popular approach is to use Gibbs sampling, where one uses the previously mentioned filtering techniques to obtain a sample from the whole state trajectory $S_{1:T}$, and then sample model parameter conditional on this path. This technique suffers from the usually high autocorrelation within the model parameter vector and the state sequence. Moreover, ideally one would like to perform estimation jointly for the model parameter $\\theta$ and the latent state space $S_{1:T}$, as both have a high interdependence as well. This is not feasible for either method that I mentioned so far. For a more in-depth discussion, an excellent comparison of point estimation and Bayesian techniques is given by (Ryden, 2008).\nA general framework to perform inference on state space models Given the statements above, I will now focus on a general approach to perform joint estimation on the model parameter and state trajectory of state space models, independent of the variate form of the latent space and the distributional assumptions on the observed variables. This is, to the best of my knowledge, only possible in a Bayesian setting, where we target the full joint posterior $P( s_{1:T}, \\theta \\mid e_{1:T})$ by iterating over the following steps:\n   propose $\\theta^{\\star} \\sim f(\\theta^{\\star} \\mid \\theta)$    propose $S^\\star_{1:T} \\sim P(s^{\\star}_{1:T} \\mid \\theta^{\\star}, e_{1:T})$.    and then accept this pair $(\\theta^{\\star}, s^{\\star}_{1:T})$ with acceptance probability    $$ \\begin{equation} \\begin{split} A_{PMCMC} \u0026amp;= \\frac{ P( s^{\\star}_{1:T} \\mid \\theta^{\\star}) }{ P(s_{1:T} \\mid \\theta ) } \\frac{ P(e_{1:T} \\mid s^{\\star}_{1:T}, \\theta^{\\star}) }{ P(e_{1:T} \\mid s_{1:T}, \\theta ) } \\frac{ P(s_{1:T} \\mid e_{1:T}, \\theta) }{ P(s^{\\star}_{1:T} \\mid e_{1:T}, \\theta^{\\star}) } \\frac{P(\\theta^{\\star})}{P(\\theta)} \\frac{q(\\theta \\mid \\theta^{\\star})}{q(\\theta^{\\star} \\mid \\theta)} \\\\\n\u0026amp;= \\frac{P(e_{1:T} \\mid \\theta^{\\star})}{P(e_{1:T} \\mid \\theta)} \\frac{P(\\theta^{\\star})}{P(\\theta)} \\frac{q(\\theta \\mid \\theta^{\\star})}{q(\\theta^{\\star} \\mid \\theta)}. \\\n\\end{split} \\end{equation} $$\nOkay, but what does that even mean? In the first step, we propose a new parameter vector $\\theta^{\\star}$ from a MCMC proposal distribution. I will not go over the basics of MCMC, as this has been explained in many other articles, but we will implement an example in part 3 of this tutorial. Given this $\\theta^{\\star}$, we sample a new trajectory $s^\\star_{1:T}$ and jointly accept this pair with the acceptance ratio from point 3. This framework allows to jointly sample $\\theta$ and $S_{1:T}$, which was our goal in the first place. However, the in general intractable likelihood term is still contained in the acceptance probability in step 3, which is simplified by using the basic marginal likelihood identity (BMI) from (Chib, 1995). Consequently, the difficulty to obtain a sample from the posterior remains the same: we need to evaluate the (marginal) likelihood of the model.\nThe Particle MCMC idea An alternative is to replace this (marginal) likelihood with an unbiased estimate $\\hat{ \\mathcal{L} }$$_\\theta(e_{1:T})$. In this setting, (Andrieu and Roberts, 2010) have shown the puzzling result that one can do so and still target the exact posterior distribution of interest, thereby opening a completely new research area now called \u0026lsquo;exact approximate MCMC\u0026rsquo;. The algorithm that is used in this setting targets the full posterior and is known as Particle MCMC (PMCMC). Here, a particle filter (PF) is used to obtain a sample for $S_{1:T}$. A by-product of this procedure is that we also obtain an unbiased estimate for the likelihood. If you are more interested in PFs, have a look at the paper from (Doucet, A. and Johansen, 2011). For anyone wondering: as $p(s_{1:T} \\mid e_{1:T}, \\theta )$ is replaced with an approximation $\\hat{p}(s_{1:T} \\mid e_{1:T}, \\theta )$, the approximation does not admit $p(s_{1:T}, \\theta \\mid e_{1:T})$ as invariant density, but this is corrected in the PMCMC algorithm via step 3.\nGoing forward The PMCMC machinery provides a very powerful framework and cures many of the difficulties in the estimation paradigms mentioned at the beginning of this series. In reality, however, much of the performance depends on whether you find a good proposal distribution $ f( . \\mid \\theta)$ and $P(s^\\star_{1:T} \\mid \\theta^{\\star}, e_{1:T})$. Moreover, we have yet not mentioned how this machinery scales in the dimension of $\\theta$ and $S_{1:T}$. These are all questions that I pursue in my own PhD studies, and we may venture through them once we know the very basics.\nIn the next blog post, we will implement a particle filter to do inference on the latent state trajectory. Going forward, we then talk about doing MCMC in this case, and implement a basic framework to sample from an unconstrained parameter space. Last but not least, we will combine all of this and apply a PMCMC algorithm on a standard HMM to obtain parameter estimates.\nReferences Andrieu, C. and Roberts, G. O. (2010). The pseudo-marginal approach for efficient monte carlo computations. Ann. Statist., 37(2):697-725.\nChib, S. (1995). Marginal likelihood from the gibbs output. Journal of the American Statistical Association, 90(432):1313-1321.\nDoucet, A. and Johansen, A. (2011). A tutorial on particle filtering and smoothing: Fifteen years later.\nRabiner, L. R. (1989). A tutorial on hidden markov models and selected applications in speech recognition. Proceedings of the IEEE, 77(2):257-286.\nRyden, T. (2008). Em versus markov chain monte carlo for estimation of hidden markov models: A computational perspective. Bayesian Analysis, 3(4):659-688.\n","date":1601596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601596800,"objectID":"b874057441ac19da58703bfe6bfbd84a","permalink":"https://paschermayr.github.io/post/statespacemodels-3-inference-on-state-space-models-part-1/","publishdate":"2020-10-02T00:00:00Z","relpermalink":"/post/statespacemodels-3-inference-on-state-space-models-part-1/","section":"post","summary":"Bayesian Inference on State Space Models","tags":["State Space Models","Particle MCMC"],"title":"Bayesian Inference on State Space Models - Part 1","type":"post"},{"authors":["Patrick Aschermayr"],"categories":["State Space Models"],"content":"Introducing Hidden semi-Markov Models\nHi there! In the last article, you got a first impression about state space models and, as an example, the basic hidden Markov model: We already talked about various advantages of state space models, but - depending on the features of the underlying data that you want to model - basic HMMs just might not be good enough. Here is why:\nA geometric duration distribution is a problem Let us focus on the unobserved process, $S_t$, for now. We are interested in the actual time spent in a particular state. Let us calculate the probability that we are currently in state $i$ and remain here for the next two time steps. For a discrete 2-state, homogenous Markov chain, using the chain rule and the Markov assumption of the basic model, we can write: $$ \\begin{equation} \\begin{split} P( S_{t+3} = j, S_{t+2} = i, S_{t+1} = i \\mid S_{t} = i ) \u0026amp;= P( S_{t+3} = j\\mid S_{t+2} = i) P(S_{t+2} = i, \\mid S_{t+1} = i) P( S_{t+1} = i \\mid S_{t} = i ) \\\\\n\u0026amp;= (1 - \\tau_{ii}) * \\tau_{ii}^2 \\end{split} \\label{eq:HMM_geom1} \\end{equation} $$\nIn general, for $t+k$ steps: $$ \\begin{equation} \\begin{split} P( S_{t+k} = j, \\dots, S_{t+1} = i \\mid S_{t} = i ) \u0026amp;= (1 - \\tau_{ii}) * \\tau_{ii}^{k-1} \\\\\n\u0026amp;= Geometric_{ \\tau_{ii} }, \\end{split} \\label{eq:HMM_geom2} \\end{equation} $$ where the geometric distribution has to be interpreted as the length of state duration up to and including the transition to the other state. Why is this a problem? The hidden states you model may switch more rapidly than you would like them to do. Even if you assign parameter very close to the boundaries of its support, the duration distribution will always implicitly be geometric. That makes it unsuitable if you want to model something that is supposed to stay in a particular state for a long time. As an example, let us say you want to model economic cycles of a developed country. You typically expect an expansion to last on average 5-10 years, but modelling such long durations is unfeasable with daily input data for an HMM. To circumvent this issue, one may use weekly or monthly data, but why give up data and essential information if alternatives are available?\nFrom HMMs to HSMMs As a solution, we can model these state duration probabilities explicitly. Such models are known as hidden semi-Markov models (HSMM), and they are a powerful generalization of the basic HMM. HSMMs have an additional latent variable, lets call it $D_t$ for duration that determines how long one may stay in any given state. $S_t$ will only have the Markov property while transitioning, otherwise it is determined by $D_t$. The tuple $\\{ S_t, D_t \\}$ forms a so-called semi-Markov chain. Let us visualize this: In an HSMM, transitions are allowed only at the end of each state, resulting in the following distributional forms:\n$$ \\begin{equation} S_t \\mid s_{t-1}, d_{t-1} \\sim P( S_t \\mid s_{t-1}, d_{t-1} ) = \\begin{cases} \\delta( S_{t} = s_{t-1}) \u0026amp;\\text{ $d_{t-1} \u0026gt; 0$ }\\\\\n\\mathcal{T}_{s_{t-1},.} \u0026amp;\\text{ $d_{t-1} = 0$ } \\end{cases} \\label{eq:EDHMM_transition} \\end{equation} $$\n$$ \\begin{equation} D_t \\mid s_{t}, d_{t-1} \\sim P(D_t \\mid s_{t}, d_{t-1}) = \\begin{cases} \\delta( D_{t} = d_{t-1} - 1) \u0026amp;\\text{ $d_{t-1} \u0026gt; 0$ } \\\\\n\\mathcal{D}_{s_{t}} \u0026amp;\\text{ $d_{t-1} = 0$ } \\end{cases} \\label{eq:EDHMM_duration} \\end{equation} $$\n$$ \\begin{equation} E_t \\mid s_{t} \\sim \\mathcal{O}_{s_{t}} \\label{eq:EDHMM_observation} \\end{equation} $$\nwhere $\\delta(a,b)$ is the Kronecker product and equals $1$ if $a = b$ and $0$ otherwise.\nNote that, as we model the duration explicitly now, we have to slightly adjust the transition matrix that we used in the previous article. The diagonal elements of the transition matrix - the probability to remain in any given state in the next time step, which formally is depicted as $\\tau_{i,i} = P(s_{t+1} = i \\mid s_{t} = i)$ - are now set to 0. The rest of the row elements in the transition matrix still need to sum up to 1. If you have trouble understanding that, check out the code below.\nLet us code! To understand the code for sampling a single trajectory of said HSMM more clearly, keep reading:\n  The function input are the model distributions stated above.\n  The function output is a single trajectory of the observed and latent variables.\n  Before we start the for-loop over time, we need to define the initial state. If the latent states of the data are conceived as a subsequence of a long-running process, the probability of the initial state should be set to the stationary state probabilities of this unobserved Markov chain. This plays an important part in the estimation paradigm, but for now we simply choose any of the available states with equal probability. Don\u0026rsquo;t worry if this sounds difficult - we will come back to it in a later article.\n  The for-loop samples the new state given the old state, and then the observation given the new state, over time. The corresponding distributions are stated above.\n  In the HSMM case, we check if the duration in the previous time step reached 0. If true, we sample a new state and duration given this state. If not, the current state continues, and we decrease the duration count by 1.\n  That\u0026rsquo;s it! Let us have a look:\n  using Distributions function sampleHSMM(evidence::Vector{\u0026lt;:Distribution}, duration::Vector{\u0026lt;:Distribution}, transition::Matrix{Float64}, T::Int64) #Initialize states and observations state = zeros(Int64, T) state_length = zeros(Int64, T) observation = zeros(Float64, T) #Sample initial s from initial distribution state[1] = rand( 1:size(transition, 1) ) #not further discussed here state_length[1] = rand( duration[ state[1] ] ) #not further discussed here observation[1] = rand( evidence[ state[1] ] ) #Loop over Time Index for time in 2:T if state_length[time-1] \u0026gt; 0 state[time] = state[time-1] state_length[time] = state_length[time-1] - 1 observation[time] = rand( evidence[ state[time] ] ) else state[time] = rand( Categorical( transition[ state[time-1], :] ) ) state_length[time] = rand( duration[ state[time] ] ) observation[time] = rand( evidence[ state[time] ] ) end end #Return output return state, state_length, observation end  sampleHSMM (generic function with 1 method)  Let us generate one sample path of said model. I am still using normal observation distributions, but added a third state so you can have a visual example from the transition matrix adjustment talk above. I will use a Negative Binomial distribution to model the state duration, but you are free to choose whatever you like best as long as the support lies on the non-negative Integers.\nusing Plots T = 5000 evidence = [Normal(0., .5), Normal(0.,1.), Normal(0.,2.)] duration = [NegativeBinomial(100., .2), NegativeBinomial(10., .05), NegativeBinomial(50.,0.5)] transition = [0.0 0.5 0.5; 0.8 0.0 0.2; 0.8 0.2 0.0;] state, state_length, observation = sampleHSMM(evidence, duration, transition, T) plot( layout=(3,1), label=false, margin=-2Plots.px) plot!(observation, ylabel=\u0026quot;data\u0026quot;, label=false, subplot=1, color=\u0026quot;gold4\u0026quot;) plot!(state, yticks = (1:3), ylabel=\u0026quot;state\u0026quot;, label=false, subplot=2, color=\u0026quot;black\u0026quot;) plot!(state_length, ylabel=\u0026quot;duration\u0026quot;, label=false, subplot=3, color=\u0026quot;blue\u0026quot;)  \r\rTo see why the HSMM is a large improvement over the previous model, try to mimic the average state duration with the code that we used for the basic HMM model. Likewise, you can choose a geometric state duration in the example here to mimic the HMM case. While the latter is done easily, the former should almost be unfeasable. As always, you can download the full script from my GitHub account.\nThat\u0026rsquo;s it for today! Well done! Initially, I wanted to write an article about several model extensions, but I quickly figured that this would be much too long for what I was planning to do, and therefore focused on HSMMs only in this post. I am going to gradually write follow-up posts on this one, as there exist many more state space models with an interesting structure, such as autoregressive or factorial HMMs. See you soon!\n","date":1600387200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600387200,"objectID":"1c97a63f333aa014ad8ec931bf162aea","permalink":"https://paschermayr.github.io/post/statespacemodels-2-hsmm/","publishdate":"2020-09-18T00:00:00Z","relpermalink":"/post/statespacemodels-2-hsmm/","section":"post","summary":"Introduction to Hidden semi-Markov Models","tags":["State Space Models","Hidden semi-Markov Model","Julia"],"title":"State Space Models Everywhere! Round 1: HSMM","type":"post"},{"authors":["Patrick Aschermayr"],"categories":["State Space Models"],"content":"Introducing State Space Models\nWelcome! In my first series of posts, I will give a primer on state space models (SSM) that will lay a foundation in understanding upcoming posts about their variants, usefulness, methods to apply inference and forecasting possibilities. When talking about a state space model (SSM), people usually refer to a bivariate stochastic process $\\{ E_t, S_t \\}_{t = 1,2,\\ldots ,T }$, where $S_t$ is an unobserved Markov chain and $E_t$ is an observed sequence of random variables. This may sounds difficult now, so let us look at a graphical example of one of the most well known SSMs out there - the so called Hidden Markov Model (HMM): So, what are SSMs really? Cool! To sum up the idea above in words, there is some unobserved process $S_t$ guiding the underlying data $E_t$. The Greek letters in the square box are the corresponding model parameter, which we assume to be fixed for now, and their priors. For example, maybe you own some shares of a company? Then the periodic changes in your portfolio, $e_t$, will be influenced by the current state of the economy, $s_t$. Hence, you may model this relationship as an HMM. There are many different variants of the model stated above, which I will discuss in future posts. One may include some autoregressive structure for the observation sequence, or one may decide to model the state sequence as a higher order Markov chain or even as a semi-Markov chain. Depending on the underlying data you want to model, one may also want to combine several of these ideas.\nAnd why are they useful? It turns out that having an underlying, unobserved process guiding some observed variables is a phenomenon that comes up naturally in many different areas. While I used an example from finance, there are many areas in genetics, anomaly detection and speech and pattern recognition, among others, where this structure comes up naturally and SSM can be applied successfully. Moreover, these models\n  can handle structural breaks, shifts, or time-varying parameters of a model. Model parameter will adjust depending on the current state.\n  allow you to model complex and nonlinear relationships.\n  handle missing and irregular spaced data easily.\n  can be used to do forecasting naturally due to their sequential setting.\n  have interpretable structure to perform inference.\n  So even if someone is only interested in the observed sequence, the addition of a latent variable offers much additional flexibility that might not be feasable otherwise. This comes at the price that SSMs are, in general, computationally hard to estimate. I will go further into this topic in a separate post.\nSampling our very first State Space Model For our first SMM, we will use observations that are normally distributed given the states. In this case, $S_t$ is a first order Markov chain, which can be depicted as a so called transition matrix $\\tau$ . Each row in this matrix has a Categorical distribution, and the parameters thus have to sum up to 1 and are bounded between 0 and 1. $$ \\begin{equation} \\begin{split} \u0026amp; e_t \\sim Normal(\\mu_{s_t}, \\sigma_{s_t} ) \\\\\n\u0026amp; s_t \\sim Categorical( \\tau_{s_{t-1}}) \\\n\\end{split} \\end{equation} $$ Let\u0026rsquo;s write down a function that can generate sample paths of the HMM from above. I will mainly use Julia in my blog posts, as this programming language is incredibly fast and readable, and has some amazing features to make the life of anyone doing scientific computational research much easier. Here are some notes to help understand the code to sample a single trajectory of said HMM:\n  The function input are the model distributions stated above.\n  The function output is a single trajectory of the observed and latent variables.\n  Before we start the for loop over time, we need to define the initial state. If the latent states of the data are conceived as a subsequence of a long-running process, the probability of the initial state should be set to the stationary state probabilities of this unobserved Markov chain. This plays an important part in the estimation paradigm, but for now we simply choose any of the available states with equal probability. Don\u0026rsquo;t worry if this sounds difficult for you - we will come back to it in a future post.\n  The for loop samples the new state given the old state, and then the observation given the new state, over time. The corresponding distributions are stated above.\n  That\u0026rsquo;s it! Let us have a look:\n  using Plots, Distributions function sampleHMM(evidence::Vector{\u0026lt;:Distribution}, transition::Vector{\u0026lt;:Distribution}, T::Int64) #Initialize states and observations state = zeros(Int64, T) observation = zeros(Float64, T) #Sample initial s from initial distribution state[1] = rand( 1:length(transition) ) #not further discussed here observation[1] = rand( evidence[ state[1] ] ) #Loop over Time Index for time in 2:T state[time] = rand( transition[ state[time-1] ] ) observation[time] = rand( evidence[ state[time] ] ) end return state, observation end  sampleHMM (generic function with 1 method)  To round out this post, you can check out this function with different distributions and transition matrices:\nT = 100 evidence = [Normal(0., .5), Normal(0.,2.)] transition = [ Categorical([0.7, 0.3]), Categorical([0.5, 0.5]) ] state, observation = sampleHMM(evidence, transition, T) plot( layout=(2,1), label=false, margin=-2Plots.px) plot!(observation, ylabel=\u0026quot;data\u0026quot;, label=false, subplot=1, color=\u0026quot;gold4\u0026quot;) plot!(state, yticks = (1:2), ylabel=\u0026quot;state\u0026quot;, xlabel=\u0026quot;time\u0026quot;, label=false, subplot=2, color=\u0026quot;black\u0026quot;)  \r\rYou can download the full script from my GitHub account.\nGoing forward We are off to a good start! Next time we will have a closer look at different variants of state space models and their subtle differences. This should give you a better understanding of possible use cases for SSMs!\n","date":1599350400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1599350400,"objectID":"4b8851d3c3cd0e808a81dc03001d20e5","permalink":"https://paschermayr.github.io/post/statespacemodels-1-a-primer-on-state-space-models/","publishdate":"2020-09-06T00:00:00Z","relpermalink":"/post/statespacemodels-1-a-primer-on-state-space-models/","section":"post","summary":"Introduction to State Space Models","tags":["State Space Models","Hidden Markov Model","Julia"],"title":"A Primer on State Space Models","type":"post"},{"authors":[],"categories":null,"content":"Slides will be added at a later date.\n","date":1588338000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588338000,"objectID":"1f360a5f76e04b81bf0a340a0982b0a3","permalink":"https://paschermayr.github.io/talk/lse-2020-phd-research-update/","publishdate":"2020-05-01T13:00:00Z","relpermalink":"/talk/lse-2020-phd-research-update/","section":"talk","summary":"Bayesian Inference on State Space Models","tags":[],"title":"Research Update Presentation","type":"talk"},{"authors":[],"categories":null,"content":"","date":1558357200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558357200,"objectID":"9c19c920e2b9a81836b02d4db970eb59","permalink":"https://paschermayr.github.io/talk/lse-2019-seds/","publishdate":"2019-05-20T13:00:00Z","relpermalink":"/talk/lse-2019-seds/","section":"talk","summary":"Research Poster Presentation about Particle MCMC Methods","tags":[],"title":"Research Poster Presentation","type":"talk"},{"authors":[],"categories":null,"content":"","date":1556715600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556715600,"objectID":"67127ef9e7679e92608934e148a3ba11","permalink":"https://paschermayr.github.io/talk/lse-2019-phd-research-update/","publishdate":"2019-05-01T13:00:00Z","relpermalink":"/talk/lse-2019-phd-research-update/","section":"talk","summary":"Bayesian Inference for hidden Semi-Markov Models","tags":[],"title":"Research Update Presentation","type":"talk"}]